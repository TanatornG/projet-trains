// Exercice 2 : Plusieurs trains se déplacent sur la ligne de chemin de fer.
//				Le déplacement des trains est le même qu'en exercice 1 (voir processus "POSITION").
//				Les trains ne peuvent pas se doubler ou se croiser 
//				(en partie grâce au processus "CONTROLLER").

// Comme attendu, le système complet ("RAILWAY"), possède des états d'interblocage.

// Eléments de la ligne (sections de rails et gares).
const N = 3 // Nombre d'éléments sur la ligne de chemin de fer
range P = 0..N
range S = 2..(N-1) // Il y a (N-2) sections (numérotées de 2 à (N-1)) entre les 2 gares (1 et N).
// Quais
const Q = 3 // Nombre de quais disponibles par gare
range I = 0..Q
// Trains
const T = 2 // Nombre de trains sur la ligne de chemin de fer
range J = 1..T

// Le déplacement d'un train est décomposé en deux temps :
//    - il atteint une section (ou une gare)
//    - il quitte une section (ou une gare)
TRAIN = (atteindre -> partir -> TRAIN).

// Un seul train peut être présent sur une section de rail.
SECTION = (newTrain -> leaveTrain -> SECTION).

// Q représente le nombre de quais encore disponibles
GARE(Q=1) = GARE[Q],
	GARE[i:I] = (when(i>0) 			newTrain -> GARE[i-1]
				|when(i>=0 & i<Q)	leaveTrain -> GARE[i+1]
				). 

// Controlleur empêchant deux trains de se doubler ou de se croiser.
// 1 <-> Free | 0 <-> inUse
CONTROLLER(L=1) = CONTROLLER[L],
	CONTROLLER[l:0..1] = 	(when(l==1) inUse -> CONTROLLER[0]
							|when(l==0) free -> CONTROLLER[1]
							).

// La ligne de chemin de fer est décomposée comme suivant (p représente la position) :
// 		GareA -- Section2 -- Section3 -- ... -- SectionN-1 -- GareB
//		 p=1  --    p=2   --    p=3   -- ... --    p=N-1   --  p=N     
//
// Un train est tout d'abord déployé en gareA.
// Le train parcourt ensuite la ligne comme suivant :  
// 		quitte la GareA -> arrive en Section2 -> quitte la Section2 -> ... -> arrive en SectionN-1 ->
// 		quitte la SectionN-1 -> arrive en GareB.
// Il fait ensuite demi-tour :
// 		quitte la GareB -> arrive en SectionN-1 -> ... -> quitte la Section3 ->
// 		arrive en Section2 -> quitte Section2 -> arrive en GareA.
// Puis il recommence son parcours.
// D = 1 <-> déplacement de gauche à droite || D = 2 <-> déplacement de droite à gauche
// Un train est initialement en position 0 (avant d'être déployé en gareA).
POSITION(P=1,D=1) = POSITION[P][D],
	POSITION[p:P][d:1..2] =	
		(when(p==0)				déployer -> quitterLR[1] -> POSITION[2][1]
		|when(p>1 & p<N & d==1) arriverLR[p] -> quitterLR[p] -> POSITION[p+1][1]
		|when(p==N) 			arriverLR[N] -> quitterRL[N] -> POSITION[N-1][2]
		|when(p>1 & p<N & d==2) arriverRL[p] -> quitterRL[p] -> POSITION[p-1][2]
		|when(p==1) 			arriverRL[1] -> quitterLR[1] -> POSITION[2][1]
		).

||RAILWAY = (train[j:J]:TRAIN || pos[j:J]:POSITION(0,1) || ctrl[1..(N-1)]:CONTROLLER(1)
			 || gareA:GARE(Q) || section[S]:SECTION || gareB:GARE(Q))
/{
	forall[j:J]{
		forall[s:S]{
			pos[j].arriverLR[s]/{section[s].newTrain, train[j].atteindre, ctrl[s-1].free},
			pos[j].quitterLR[s]/{section[s].leaveTrain, train[j].partir, ctrl[s].inUse},

			pos[j].arriverRL[s]/{section[s].newTrain, train[j].atteindre, ctrl[s].free},
			pos[j].quitterRL[s]/{section[s].leaveTrain, train[j].partir, ctrl[s-1].inUse}
		},

		pos[j].déployer/{gareA.newTrain, train[j].atteindre},

		pos[j].arriverLR[N]/{gareB.newTrain, train[j].atteindre, ctrl[N-1].free},
		pos[j].quitterLR[1]/{gareA.leaveTrain, train[j].partir, ctrl[1].inUse},

		pos[j].arriverRL[1]/{gareA.newTrain, train[j].atteindre, ctrl[1].free},
		pos[j].quitterRL[N]/{gareB.leaveTrain, train[j].partir, ctrl[N-1].inUse}
	}
}.
