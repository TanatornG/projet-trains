// Exercice 4 : On ajoute une gare intermédiaire entre la gareA et la gareB.

// La vérification de progrès indique une violation concernant les actions "déployer".
// Cela est normal étant donné que le déploiement est une action ponctuelle pour initialiser
// la position des trains.

// Eléments de la ligne (sections de rails et gares).
const S = 1 // Nombre de sections de rail entre chaque gare.
const N = (2*S) + 3 // Nombre d'éléments sur la ligne de chemin de fer (2*S sections de rails + 3 gares).
range P = 0..N
// Il y a (N-3) sections (numérotées de 2 à (S+1), et de (S+3) à (N-1))
// Il y a trois gares : gareA (p=1), gareB (p=N), gareMilieu (p=S+2)
range S1 = 2..(S+1)
const GM = (S+2)
range S2 = (S+3)..(N-1)
// Quais
const Q = 4 // Nombre de quais disponibles en gares A et B.
const QM = 2 // Nombre de quais disponibels en gare M.
range I = 0..Q
// Trains
const T = 3 // Nombre de trains sur la ligne de chemin de fer
range J = 1..T

// Le déplacement d'un train est décomposé en deux temps :
//    - il atteint une section (ou une gare)
//    - il quitte une section (ou une gare)
TRAIN = (atteindre -> partir -> TRAIN).

// Un seul train peut être présent sur une section de rail.
SECTION = (newTrain -> leaveTrain -> SECTION).

// Q représente le nombre de quais encore disponibles
GARE(Q=1) = GARE[Q],
	GARE[i:I] = (when(i>0) 			newTrain -> GARE[i-1]
				|when(i>=0 & i<Q)	leaveTrain -> GARE[i+1]
				). 

// Controlleur empêchant deux trains de se doubler ou de se croiser.
// l=1 <-> Free | l=0 <-> inUse
CONTROLLER(L=1) = CONTROLLER[L],
	CONTROLLER[l:0..1] = 	(when(l==1) inUse -> CONTROLLER[0]
							|when(l==0) free -> CONTROLLER[1]
							).

// Controlleur empêchant deux trains de s'engager en sens inverse entre les gares A et M (resp M et B).
CONTROLLER_GARES = (newTrainLR -> IN_USE_LR[1] | newTrainRL -> IN_USE_RL[1]),
			IN_USE_LR[j:J] = 	(when(j>0 & j<T) newTrainLR -> IN_USE_LR[j+1] 
								|when(j>1) arrivedTrainLR -> IN_USE_LR[j-1]
								|when(j==1) arrivedTrainLR -> CONTROLLER_GARES
								),
			IN_USE_RL[j:J] = 	(when(j>0 & j<T) newTrainRL -> IN_USE_RL[j+1] 
								|when(j>1) arrivedTrainRL -> IN_USE_RL[j-1]
								|when(j==1) arrivedTrainRL -> CONTROLLER_GARES
								).

// Controlleur empêchant trop de trains de s'engager sur la ligne
// Soit QM le nombre de quais de la gare M
// Il y a au maximum QM trains en déplacement entre la gare A et la gare B.
CONTROLLER_MILIEU = (newTrainToM -> CONTROLLER_MILIEU[1]),
			CONTROLLER_MILIEU[j:J] = (when(j>0 & j<QM) newTrainToM -> CONTROLLER_MILIEU[j+1] 
								|when(j>1) arrivedTrainM -> CONTROLLER_MILIEU[j-1]
								|when(j==1) arrivedTrainM -> CONTROLLER_MILIEU
								).

// La ligne de chemin de fer est décomposée comme suivant (p représente la position) :
//
// 		GareA -- Section2 -- Section3 -- ... --    GareM  -- ... -- SectionN-1 -- GareB
//		 p=1  --    p=2   --    p=3   -- ... --    p=N/2  -- ... --    p=N-1   --  p=N     
//
// Un train est tout d'abord déployé en gareA.
// Le train parcourt ensuite la ligne comme suivant :  
// 		quitte la GareA -> arrive en Section2 -> quitte la Section2 -> ... -> arrive en SectionN-1 ->
// 		quitte la SectionN-1 -> arrive en GareB.
// Il fait ensuite demi-tour :
// 		quitte la GareB -> arrive en SectionN-1 -> ... -> quitte la Section3 ->
// 		arrive en Section2 -> quitte Section2 -> arrive en GareA.
// Puis il recommence son parcours.
// D = 1 <-> déplacement de gauche à droite || D = 2 <-> déplacement de droite à gauche
// Un train est initialement en position 0 (avant d'être déployé en gareA).
POSITION(P=1,D=1) = POSITION[P][D],
	POSITION[p:P][d:1..2] =	
		(when(p==0)				déployer -> quitterLR[1] -> POSITION[2][1]
		|when(p>1 & p<N & d==1) arriverLR[p] -> quitterLR[p] -> POSITION[p+1][1]
		|when(p==N) 			arriverLR[N] -> quitterRL[N] -> POSITION[N-1][2]
		|when(p>1 & p<N & d==2) arriverRL[p] -> quitterRL[p] -> POSITION[p-1][2]
		|when(p==1) 			arriverRL[1] -> quitterLR[1] -> POSITION[2][1]
		).

||RAILWAY = (train[j:J]:TRAIN || pos[j:J]:POSITION(0,1) 
			 || ctrl[1..(N-1)]:CONTROLLER(1) || ctrlAM:CONTROLLER_GARES || ctrlMB:CONTROLLER_GARES
			 || ctrlM:CONTROLLER_MILIEU
			 || gareA:GARE(Q) || section[S1]:SECTION || gareM:GARE(QM) || section[S2]:SECTION 
			 || gareB:GARE(Q))
/{
	forall[j:J]{
		// Renommage pour les sections entre la gareA et la gareM
		forall[s:S1]{
			pos[j].arriverLR[s]/{section[s].newTrain, train[j].atteindre, ctrl[s-1].free},
			pos[j].quitterLR[s]/{section[s].leaveTrain, train[j].partir, ctrl[s].inUse},

			pos[j].arriverRL[s]/{section[s].newTrain, train[j].atteindre, ctrl[s].free},
			pos[j].quitterRL[s]/{section[s].leaveTrain, train[j].partir, ctrl[s-1].inUse}
		},
		// Renommage pour les sections entre la gareM et la gareB
		forall[s:S2]{
			pos[j].arriverLR[s]/{section[s].newTrain, train[j].atteindre, ctrl[s-1].free},
			pos[j].quitterLR[s]/{section[s].leaveTrain, train[j].partir, ctrl[s].inUse},

			pos[j].arriverRL[s]/{section[s].newTrain, train[j].atteindre, ctrl[s].free},
			pos[j].quitterRL[s]/{section[s].leaveTrain, train[j].partir, ctrl[s-1].inUse}
		},
		// Renommage pour le déploiement en gareA
		pos[j].déployer/{gareA.newTrain, train[j].atteindre},

		// Renommage pour les gares A et B
		pos[j].arriverLR[N]/{gareB.newTrain, train[j].atteindre, ctrl[N-1].free, ctrlMB.arrivedTrainLR, ctrlM.arrivedTrainM},
		pos[j].quitterLR[1]/{gareA.leaveTrain, train[j].partir, ctrl[1].inUse, ctrlAM.newTrainLR, ctrlM.newTrainToM},
		pos[j].arriverRL[1]/{gareA.newTrain, train[j].atteindre, ctrl[1].free, ctrlAM.arrivedTrainRL, ctrlM.arrivedTrainM},
		pos[j].quitterRL[N]/{gareB.leaveTrain, train[j].partir, ctrl[N-1].inUse, ctrlMB.newTrainRL, ctrlM.newTrainToM},

		// Renommage pour la gare M
		pos[j].arriverLR[GM]/{gareM.newTrain, train[j].atteindre, ctrl[GM-1].free, ctrlAM.arrivedTrainLR},
		pos[j].quitterLR[GM]/{gareM.leaveTrain, train[j].partir, ctrl[GM].inUse, ctrlMB.newTrainLR},
		pos[j].arriverRL[GM]/{gareM.newTrain, train[j].atteindre, ctrl[GM].free, ctrlMB.arrivedTrainRL},
		pos[j].quitterRL[GM]/{gareM.leaveTrain, train[j].partir, ctrl[GM-1].inUse, ctrlAM.newTrainRL}
	}
}.
